public class Sum_Of_All_Elements_Of_Tree {
    static class Node{
        int data ;
        Node left ;
        Node right ;
        Node(int d){
            data = d ;
            left = null ;
            right = null ;
        }
    }
    public Node root = null ;
    public void inorder_Traversal(Node node ){
        if(root == null){
            System.out.println("Tree is empty");
        }
        else{
            if(node.left != null){
                inorder_Traversal(node.left);
            }
            System.out.print(node.data + " ");
            if(node.right != null){
                inorder_Traversal(node.right);
            }
        }
    }
    int sum = 0;
    public int sum_of_Elements_Of_Tree(Node node){
        if(root == null){
            return 0 ;
        }
        else{
            if(node.left != null){
                sum_of_Elements_Of_Tree(node.left);
            }
            sum = sum + node.data ;
            if(node.right != null){
                sum_of_Elements_Of_Tree(node.right) ;
            }
        }
        return sum ;
    }
    public static void main(String [] args){
        Sum_Of_All_Elements_Of_Tree tree = new Sum_Of_All_Elements_Of_Tree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(7);
        System.out.println("Elements of Binary tree be ");
        tree.inorder_Traversal(tree.root);
        System.out.println();
        System.out.println("Sum Of Elements Of tree be ") ;
        System.out.println(tree.sum_of_Elements_Of_Tree(tree.root));

    }
}

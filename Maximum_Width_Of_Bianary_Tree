import java.util.*;
public class Maximum_Width_Of_Bianary_Tree {
    static class Node{
        int data ;
        Node left ;
        Node right ;
        Node(int d){
            data = d ;
            left = null ;
            right = null ;
        }
    }
    public Node root = null ;
    public int max_Width(Node node){
        int Level_Nodes = 0;
        int maxwidth = 0;
        if (root == null) {

            System.out.println("Tree is empty");
            return 0 ;
        }
        else {

            Queue<Node> queue = new LinkedList<Node>();
            queue.add(node);
            while (queue.size() != 0) {
                Level_Nodes = queue.size();




                while (Level_Nodes > 0) {
                    Node current =  queue.remove();
                    maxwidth = Math.max(maxwidth, Level_Nodes);
                    if (current.left != null) {
                        queue.add(current.left);

                    }
                    if (current.right != null) {
                        queue.add(current.right);
                    }


                    Level_Nodes--;

                }


            }
        }
        return maxwidth ;
    }
    public static void main(String [] args){
        Maximum_Width_Of_Bianary_Tree tree = new Maximum_Width_Of_Bianary_Tree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(6);
        tree.root.left.left = new Node(3) ;
        tree.root.left.right= new Node(4);
        System.out.println(tree.max_Width(tree.root));

    }

}

public class Posiible_Binary_Search_Tree_with_N_Keys {
    static class Node{
        int data ;
        Node left ;
        Node right;
        Node(int d){
            data = d ;
            left = null ;
            right = null ;
        }
    }
    public Node root = null;
    int n = 0;
    public void inorder_Traversal(Node node){
        if(root == null){
            System.out.println("Tree is empty") ;
        }
        else{
            if(node.left != null){
                inorder_Traversal(node.left);
            }
            System.out.print(node.data + " ");
            n++ ;
            if(node.right != null){
                inorder_Traversal(node.right);
            }
        }
    }
    public int factorial(int num){
        int fact = 1 ;
        if(num == 0){
            return 1 ;
        }
        else{
            while(num>0){
                fact = fact * num ;
                num-- ;
            }

        }
        return fact ;
    }
    public int Possible_Binary_Search_Tree(){

        int Number_Of_Binary_Search_Tree = factorial(2*n)  / (factorial(n+1) * factorial(n));
        return Number_Of_Binary_Search_Tree ;


    }
    public static void main(String [] args){
        Posiible_Binary_Search_Tree_with_N_Keys tree = new Posiible_Binary_Search_Tree_with_N_Keys();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3) ;
        System.out.println("Elements of tree be ");
        tree.inorder_Traversal(tree.root);
        System.out.println();
        System.out.println("Number of Possible Binary Tree " + tree.Possible_Binary_Search_Tree()) ;
    }
}

public class Minimum_Node_In_Tree {
    static class Node{
        int data ;
        Node left ;
        Node right ;
        Node(int d ){
            data = d ;
            left = null ;
            right = null ;
        }
    }
    public Node root = null ;
    public void inorder_Traversal(Node node){
        if(root == null){
            System.out.println("Tree be empty ");

        }
        else{
            if(node.left != null){
                inorder_Traversal(node.left);
            }
            System.out.print(node.data + " ");
            if(node.right != null){
                inorder_Traversal(node.right);
            }
        }
    }
   // int minimum = root.data;
    public int minimum_Elements(Node node){
        int minimum = node.data;
        if(root == null){
            System.out.println("Tree be empty");
        }
        else{
            if(node.left != null){
               int left_value = minimum_Elements(node.left);
                minimum = Math.min(minimum, left_value);
            }


            if(node.right != null){
            int right_value =   minimum_Elements(node.right);
                minimum = Math.min(minimum, right_value);
            }
        }
        return minimum ;
    }
    public static void main(String [] args){
        Minimum_Node_In_Tree tree = new Minimum_Node_In_Tree() ;
        tree.root = new Node(10);
        tree.root.right = new Node(2);
        tree.root.left = new Node(4) ;
        tree.root.left.left = new Node(100 );
        tree.root.right.right = new Node(6);
        System.out.println("Nodes of tree be ");
        tree.inorder_Traversal(tree.root);
        System.out.println();
        System.out.println("Minimum elements of tree be ");
        System.out.println(tree.minimum_Elements(tree.root));

    }
}

import java.util.*;

public class Binary_Tree_To_Binary_Search_Tree {
    static class Node{
        int data ;
        Node left ;
        Node right ;
        Node(int d){
            data = d ;

        }
    }
    public Node root = null ;
    int [] tree_Array ;
    public Node BinaryTree_To_BinarySearchTree(Node node){
        int treeSize = Size(node);
        tree_Array = new int[treeSize] ;
        convert_Binary_Tree_To_Array(node);
        Arrays.sort(tree_Array);

        Node d = createBinarySearchTree(0 , tree_Array.length-1);
        return d ;


    }


    public int Size(Node node){
        int size = 0;

        if(node == null) {
            return 0;
        }

        else{
            size = Size(node.left) + Size(node.right)+1 ;
            return size ;
        }



    }
    int index = 0;

    public void convert_Binary_Tree_To_Array(Node node){

        if(node.left != null) {
            convert_Binary_Tree_To_Array(node.left);
        }
        // node = node.left ;

        tree_Array[index] = node.data ;
        index++ ;
        if(node.right != null) {
            convert_Binary_Tree_To_Array(node.right);
        }
        // node = node.right ;



    }
    public Node createBinarySearchTree(int start , int end){
        if(start>end){
            return null ;
        }

        int mid = (start + end)/ 2 ;
        Node node = new Node(tree_Array[mid]);
        node.left = createBinarySearchTree(start , mid-1);
        node.right = createBinarySearchTree(mid+1 ,end) ;
        return node ;


    }

    public void inorder_Traversal(Node node){
        if(root == null){
            System.out.println("tree is empty");
        }
        else{
            if(node.left != null){
                inorder_Traversal(node.left);
            }
            System.out.print(node.data + " ");
            if(node.right != null){
                inorder_Traversal(node.right);
            }
        }

    }

    public static void main(String [] args){
        Binary_Tree_To_Binary_Search_Tree tree = new Binary_Tree_To_Binary_Search_Tree();
        tree.root = new Node(1);
        tree.root.left = new Node(2) ;
        tree.root.right = new Node(3);
        tree.root.right.right = new Node(9);

        System.out.println("Elements of Binary tree be ");
        tree.inorder_Traversal(tree.root);
        System.out.println();
        System.out.println("Binary Search Tree elements");
        Node bst = tree.BinaryTree_To_BinarySearchTree(tree.root);
        tree.inorder_Traversal(bst);


    }
}

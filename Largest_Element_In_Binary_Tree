public class Largest_Element_In_Binary_Tree {
    static class Node{
        int data ;
        Node left ;
        Node right ;
        Node(int d){
            data = d ;
            left = null ;
            right = null ;
        }
    }
    public Node root = null;
    public void inorder_Traversal(Node node){
        if(root == null){
            System.out.println("Tree be empty");
        }
        else{
            if(node.left != null){
                inorder_Traversal(node.left);
            }
            System.out.print(node.data + " ");
            if(node.right != null){
                inorder_Traversal(node.right);
            }
        }
    }
    int value = 0;
    int max  = 0;

    public int max_Element(Node node){



        if(root == null){
            System.out.println("Tree is empty");
            return 0 ;

        }
        else{
            if(node.left != null){
                max_Element(node.left);
            }
            value = node.data ;
            max = Math.max(max,value);
            if(node.right != null){
                max_Element(node.right);
            }

        }
        return max ;

    }
    public static void main(String [] args){
        Largest_Element_In_Binary_Tree tree = new Largest_Element_In_Binary_Tree();
        tree.root = new Node(1);
        tree.root.left = new Node(20);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.inorder_Traversal(tree.root);
        System.out.println();
        System.out.println("Maximum element in tree be ") ;
        System.out.println(tree.max_Element(tree.root)) ;

    }
}
